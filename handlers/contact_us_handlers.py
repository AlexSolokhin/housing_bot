from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from create_bot import bot
from states.states_group import FSMCallMe, FSMTextMe
from utils.contact_us import send_call_request_admins, send_message_to_admin


async def check_phone_inline_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –ò–Ω–ª–∞–π–Ω —Ö—ç–Ω–¥–ª–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞".

    :param callback: –æ–±—ä–µ–∫—Ç CallbackQuery
    :type callback: types.CallbackQuery
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç—ç–π—Ç
    :type: FSMCallMe
    :return: None
    """

    tg_id = callback.from_user.id
    next_step = callback.data

    if next_step == 'yes':
        await send_call_request_admins(tg_id)
        await bot.send_message(tg_id, '‚úÖ<b>–û—Ç–ª–∏—á–Ω–æ!</b> –ù–∞—à –¥–∏—Å–ø–µ—Ç—á–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!',
                               parse_mode='HTML')
        await state.finish()

    elif next_step == 'another_phone':
        await bot.send_message(tg_id, "üìû–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º?")
        await FSMCallMe.another_number.set()

    await callback.answer()


async def send_actual_phone_message_handler(message: types.Message, state: FSMContext) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞".

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :type message: types.Message
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç—ç–π—Ç
    :type: FSMCallMe
    :return: None
    """

    tg_id = message.from_user.id
    actual_phone = message.text

    await send_call_request_admins(tg_id, actual_phone=actual_phone)
    await bot.send_message(tg_id, '‚úÖ<b>–û—Ç–ª–∏—á–Ω–æ!</b> –ù–∞—à –¥–∏—Å–ø–µ—Ç—á–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!', parse_mode='HTML')
    await state.finish()


async def chat_with_admin_message_handler(message: types.Message) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É".

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :type message: types.Message
    """

    tg_id = message.from_user.id
    await send_message_to_admin(tg_id, message.text)


async def stop_chat_inline_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –ò–Ω–ª–∞–π–Ω —Ö—ç–Ω–¥–ª–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Ç–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º".

    :param callback: –æ–±—ä–µ–∫—Ç CallbackQuery
    :type callback: types.CallbackQuery
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç—ç–π—Ç
    :type: FSMTextMe
    :return: None
    """

    tg_id = callback.from_user.id
    await bot.send_message(tg_id, '‚ùåüìû<b>–î–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω...</b>', parse_mode='HTML')
    await state.finish()
    await callback.answer()


def register_contact_us_handlers(dispatcher: Dispatcher):
    dispatcher.register_callback_query_handler(check_phone_inline_handler,
                                               state=FSMCallMe.check_number)
    dispatcher.register_message_handler(send_actual_phone_message_handler,
                                        content_types=['text'],
                                        state=FSMCallMe.another_number)
    dispatcher.register_message_handler(chat_with_admin_message_handler,
                                        content_types=['text'],
                                        state=FSMTextMe.connect_admin)
    dispatcher.register_callback_query_handler(stop_chat_inline_handler,
                                               state=FSMTextMe.connect_admin)
