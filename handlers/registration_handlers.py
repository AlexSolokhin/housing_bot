from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from create_bot import bot
from states.states_group import FSMRegistration
from database.user_db_methods import check_user_exist, check_user_blocked, create_user
from utils.validators import name_validator, phone_validator
from utils.menu import main_menu


async def start_command(message: types.Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –∑–∞–ø—Ä–µ—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :type message: types.Message
    :return: None
    """

    tg_id = message.from_user.id

    if not check_user_exist(tg_id):
        await FSMRegistration.register_name.set()
        await bot.send_message(tg_id, "‚òÄ<b>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫,</b> –±–æ—Ç —Å–æ–∑–¥–∞–Ω, "
                                      "—á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. "
                                      "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –ø—Ä–∏—à–ª–∏—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞—à–µ "
                                      "<b>–ò–º—è</b> –∏ <b>–§–∞–º–∏–ª–∏—é</b>",
                               parse_mode="HTML")

    elif check_user_blocked(tg_id):
        await bot.send_message(tg_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –±–æ—Ç–∞. "
                                      "–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                               parse_mode="HTML")

    else:
        await main_menu(tg_id)


async def set_name(message: types.Message, state: FSMContext) -> None:
    """
    –ó–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :type message: types.Message
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç—ç–π—Ç
    :type: FSMRegistration
    :return: None
    """

    if await name_validator(message.text):
        name = message.text.split(' ')[0]
        surname = message.text.split(' ')[1]

        async with state.proxy() as data:
            data['name'] = name
            data['surname'] = surname

        await FSMRegistration.next()
        await bot.send_message(message.from_user.id, "üìû–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> —á–µ—Ä–µ–∑ <b>+7</b> "
                                                     "—Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
                               parse_mode="HTML")

    else:
        await bot.send_message(message.from_user.id, "‚õîüìõ<b>–ò–º—è</b> –∏ <b>–§–∞–º–∏–ª–∏—è</b> –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã —á–µ—Ä–µ–∑ –æ–¥–∏–Ω "
                                                     "<i>–ø—Ä–æ–±–µ–ª,</i> –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã —á–µ—Ä–µ–∑ <i>–ö–∏—Ä–∏–ª–ª–∏—Ü—É</i>. "
                                                     "–¢–∞–∫–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å <i>–∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã.</i> <b>–£—á—Ç–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏"
                                                     "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</b>",
                               parse_mode="HTML")


async def set_phone(message: types.Message, state: FSMContext) -> None:
    """
    –ó–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :type message: types.Message
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç—ç–π—Ç
    :type: FSMRegistration
    :return: None
    """

    if await phone_validator(message.text):
        async with state.proxy() as data:
            tg_id = message.from_user.id
            tg_username = message.from_user.username
            name = data['name']
            surname = data['surname']
            phone = message.text
            create_user(tg_id, tg_username, name, surname, phone)

        await state.finish()
        await main_menu(tg_id)

    else:
        await bot.send_message(message.from_user.id, "‚õîüìõ‚õî<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –¥–æ–ª–∂–µ–Ω "
                                                     "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ <b>+7. –£—á—Ç–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ "
                                                     "—Å–Ω–æ–≤–∞:</b>",
                               parse_mode="HTML")


def register_registration_handlers(dispatcher: Dispatcher):
    dispatcher.register_message_handler(start_command, content_types=['text'], commands=['start'], state=None)
    dispatcher.register_message_handler(set_name, content_types=['text'], state=FSMRegistration.register_name)
    dispatcher.register_message_handler(set_phone, content_types=['text'], state=FSMRegistration.register_phone)
