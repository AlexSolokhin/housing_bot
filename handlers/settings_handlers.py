from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from create_bot import bot
from states.states_group import FSMSetName, FSMSetPhone
from database.user_db_methods import change_name, change_phone
from utils.validators import name_validator, phone_validator


async def change_name_message_handler(message: types.Message, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :type message: types.Message
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç—ç–π—Ç
    :type: FSMSettings
    :return: None
    """

    tg_id = message.from_user.id
    user_input = message.text

    if await name_validator(user_input):
        new_name = user_input.split(' ')[0]
        new_surname = user_input.split(' ')[1]

        change_name(tg_id, new_name, new_surname)

        await bot.send_message(tg_id, "üõ†Ô∏è‚úÖüõ†Ô∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ <b>–∏–º–µ–Ω–∏</b> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!", parse_mode='HTML')
        await state.finish()

    else:
        await bot.send_message(message.from_user.id, "‚õîüìõ<b>–ò–º—è</b> –∏ <b>–§–∞–º–∏–ª–∏—è</b> –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã —á–µ—Ä–µ–∑ –æ–¥–∏–Ω "
                                                     "<i>–ø—Ä–æ–±–µ–ª,</i> –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã —á–µ—Ä–µ–∑ <i>–ö–∏—Ä–∏–ª–ª–∏—Ü—É</i>. "
                                                     "–¢–∞–∫–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å <i>–∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã.</i> <b>–£—á—Ç–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏"
                                                     "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</b>",
                               parse_mode="HTML")


async def change_phone_message_handler(message: types.Message, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :type message: types.Message
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç—ç–π—Ç
    :type: FSMSettings
    :return: None
    """

    tg_id = message.from_user.id
    user_input = message.text

    if await phone_validator(user_input):
        change_phone(tg_id, user_input)

        await bot.send_message(tg_id, "üõ†Ô∏è‚úÖüõ†Ô∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ <b>–Ω–æ–º–µ—Ä–∞</b> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!", parse_mode='HTML')
        await state.finish()

    else:
        await bot.send_message(message.from_user.id, "‚õîüìõ‚õî<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –¥–æ–ª–∂–µ–Ω "
                                                     "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ <b>+7. –£—á—Ç–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ "
                                                     "—Å–Ω–æ–≤–∞:</b>",
                               parse_mode="HTML")


def register_settings_handlers(dispatcher: Dispatcher):
    dispatcher.register_message_handler(change_name_message_handler,
                                        content_types=['text'],
                                        state=FSMSetName.set_name)
    dispatcher.register_message_handler(change_phone_message_handler,
                                        content_types=['text'],
                                        state=FSMSetPhone.set_phone)
